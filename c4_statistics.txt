1. Lines of Code (LOC):
   - Total LOC: 483
   - LOC per function:
     - next: 83 LOC
     - expr: 146 LOC
     - stmt: 46 LOC
     - main: 180 LOC

2. Cyclomatic Complexity of Each Function:
     - next: 50
     - expr: 85
     - stmt: 5
     - main: 11

3. Number of Functions and Their Sizes:
   - Total Functions: 4
   - Average LOC per function: (83 + 146 + 46 + 180) / 4.0 = 113.75 LOC

4. Number of Global Variables and Their Usage:
   - Total Global Variables: 14
   - char *p: Points to the current position in the source code. It’s used to traverse the input during lexical analysis.
   - char *lp: Marks the beginning of the current line in the source code. It’s used (for example) when printing lines with their numbers.
   - char *data: Serves as a pointer to the data/bss area. It’s used for storing string literals and other data generated during compilation.
   - int *e: Points to the current location in the emitted code. This is where the generated intermediate (or machine) code is stored.
   - int *le: Represents the current position in the emitted code for purposes such as printing or iterating through the generated code.
   - int *id: Points to the currently parsed identifier. It is used in the symbol table lookup and handling of identifiers.
   - int *sym: Acts as the symbol table (a simple list of identifiers). It stores all the identifiers (and associated information) used during compilation.
   - int tk: Holds the value of the current token produced by the lexical analyzer.
   - int ival: Stores the numeric value associated with the current token (for example, for number tokens).
   - int ty: Indicates the type of the current expression (e.g., INT, CHAR, PTR). It is used in type checking during expression parsing.
   - int loc: Tracks the local variable offset. It’s used to manage the allocation of local variables in functions.
   - int line: Maintains the current line number of the source code being processed. It’s used for error reporting and debugging.
   - int src: A flag that, when set, enables printing of the source code and assembly during compilation.
   - int debug: A flag that, when enabled, triggers the printing of executed instructions for debugging purposes.

5. Unique Tokens and Their Frequency:
- Num: 8
- Fun: 3
- Sys: 3
- Glo: 3
- Loc: 7
- Id: 7
- Char: 8
- Else: 2
- Enum: 2
- If: 2
- Int: 8
- Return: 2
- Sizeof: 2
- While: 3
- Assign: 13
- Cond: 4
- Lor: 3
- Lan: 4
- Or: 3
- Xor: 4
- And: 3
- Eq: 4
- Ne: 3
- Lt: 3
- Gt: 3
- Le: 3
- Ge: 3
- Shl: 3
- Shr: 3
- Add: 6
- Sub: 8
- Mul: 11
- Div: 4
- Mod: 3
- Inc: 18
- Dec: 4
- Brak: 3

6. Number of Branches, Loops, and Nesting Levels:
   - Total Branches: 17
   - Total Loops: 29
   - Maximum Nesting Level: 8

7. Memory Usage Patterns:
   - Heap Allocations (malloc calls): The program performs 5 explicit heap allocations in main() using malloc. These calls allocate large memory pools (each of size 256×1024 bytes) for the following purposes:
     - The symbol table (sym)
     - The text area for emitted code (e, with le as an auxiliary pointer)
     - The data area (data)
     - The stack area for the virtual machine (sp)
     - The source code area (lp and p)

     Additionally, during virtual machine execution, instructions like MALC may trigger further dynamic memory allocations.

   - Stack Allocations (local variable declarations): Each function in the file (e.g., next(), expr(), stmt(), main()) declares its own set of local variables that are allocated on the call stack. These include temporary pointers, integer counters, register variables, and other helper variables used for parsing, code generation, and virtual machine operation. The use of automatic (stack) allocation ensures that temporary data is efficiently managed and automatically cleaned up when the function returns.
